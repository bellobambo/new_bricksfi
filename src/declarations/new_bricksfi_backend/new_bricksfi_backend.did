type Result_1 = 
 variant {
   err: Error;
   ok: nat;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Property = 
 record {
   bathrooms: nat;
   bedrooms: nat;
   createdAt: int;
   creator: principal;
   description: text;
   fundedAmount: nat;
   fundingComplete: bool;
   id: nat;
   imageUrls: vec text;
   location: text;
   name: text;
   squareMeters: nat;
   totalPrice: nat;
   yieldPercentage: float64;
 };
type Investment = 
 record {
   amount: nat;
   id: nat;
   investor: principal;
   propertyId: nat;
   timestamp: int;
 };
type Error = 
 variant {
   AlreadyFunded;
   AnonymousNotAllowed;
   InvalidAmount;
   NotFound;
   Unauthorized;
 };
type BricksFi = 
 service {
   createProperty: (name: text, description: text, bedrooms: nat, bathrooms:
    nat, squareMeters: nat, imageUrls: vec text, location: text, totalPrice:
    nat, yieldPercentage: float64) -> (Result_1);
   deleteProperty: (id: nat) -> (Result);
   getAllProperties: () -> (vec Property) query;
   getCreatedProperties: () -> (vec Property) query;
   getFundingPercentage: (propertyId: nat) -> (opt float64) query;
   getMyInvestments: () -> (vec Investment) query;
   getPrincipal: () -> (principal) query;
   getProperty: (id: nat) -> (opt Property) query;
   getPropertyCount: () -> (nat) query;
   getPropertyInvestments: (propertyId: nat) -> (vec Investment) query;
   investInProperty: (propertyId: nat, amount: nat) -> (Result_1);
   updateProperty: (id: nat, name: text, description: text, imageUrls:
    vec text) -> (Result);
   whoami: () -> (principal) query;
 };
service : (owner: principal) -> BricksFi
